#!/bin/sh
#-----------------------------------------------------------------------------#
# vim: ts=4 sw=4 expandtab
#-----------------------------------------------------------------------------#
#
# eclipse_fd - Eclipse with library(fzn_fd)
# eclispe_ic - Eclipse with library(fzn_ic)
#
# fzntini - direct to tinisat FlatZinc interpreter.  
#
# g12_colgen_cplex - G12 FlatZinc interpeter with column generation backend
#                    and CPLEX as phase 1 and 2 master solver. (mzn2fzn)
#
# g12_fd        - G12 FlatZinc interpreter with FD backend. (mzn2fzn)
#
# g12_lazyfd_minisat - G12 FlatZinc interpreter with lazy FD backend. (mzn2fzn)
#                 (This uses Minisat as the underlying SAT solver).  
#
# g12_mip_cplex - G12 FlatZinc interpreter with MIP backend and CPLEX.
#                 (mzn2fzn_lin) 
# g12_mip_osi_cbc - G12 FlatZinc interpreter with MIP backend and OSI/CBC.
#                   (mzn2fzn_lin)
#
# g12_mip_osi_cplex - G12 FlatZinc interpreter with MIP backend OSI/CPLEX.
#                     (mzn2fzn_lin)
#
# g12_zinc          - G12 Zinc compiler.  "Flattening" here means compiling
#                     to Mercury.  The solvers targeted are G12/FD and G12/IC.
#
# XXX gecode            Gecode FlatZinc interpreter - need a newer version
# the one we are using doesn't appear to support FlatZinc 0.8.
#
# TODO:
#
# Ideally we would also like:
#   * Minion    (fzn2minion is currently broken)
#   * G12/MIP with GLPK (GLPK binding is currently broken)
#   * G12/MIP with OSI_GLPK (odd linker problems)
#   * G12/SAT with Minisat (buggy? produces incorrect output sometimes)
#   * G12/SAT with Tinisat (tinisat binding not up-to-date.)
#   * G12/LazyFD with tinisat (as above)
#
# It would also be useful to use the Cadmium mzn2fzn as well.
#
# NOTE: make sure the G12 bin directory is in your PATH before running this
# script.  Also make sure the ECLiPSe installation is in your PATH.
# Also the Gecode flatzinc bin directory.  For Gecode you also need
# to set LD_LIBRARY_PATH to include:
#
# /usr/local/gecode-flatzinc-1.2.1/lib/:/usr/local/gecode-2.1.1/lib/
# (The above is for pluto)
#
#
# The CPLEX banner message will get included in the output file so you
# should filter it out using:
#
#   cat MODREF.results | grep -v "^ILOG"
#
# For the paper, we need to:
#
# * choose a specific revision of G12 (we should tag that revision as well)
# * choose a specific Mercury rotd (and tag the Mercury repository)
# * choose a set of mmc optimisation flags with which to build the system
#   (--enable-opt-high will probably suffice)
# * XXX what version of Gecode should we use? (We are using 2.1.1 and
#   gecode fzn 1.2.1)
#
#-----------------------------------------------------------------------------#

SOLVERS="eclipse_fd eclipse_ic fzntini g12_colgen_cplex g12_fd g12_lazyfd_minisat g12_mip_cplex g12_mip_osi_cbc g12_mip_osi_cplex g12_zinc"
OUTPUT=MODREF

# Use GNU time rather than the shell built-in.
THIS_DIR=`pwd`
TIME_CMD="$THIS_DIR/scripts/dotime"

# "Flattening" for the Zinc compiler (actually Zinc -> Mercury).
#
ZINC_FLATTEN="$THIS_DIR/scripts/zc.sh"
ZINC_EVAL="$THIS_DIR/scripts/run_zinc.sh"

ECLIPSE_GLOBALS_FD_DIR="/usr/local/eclipse_5.10_140/lib_public/fzn_fd"
ECLIPSE_GLOBALS_IC_DIR="/usr/local/eclipse_5.10_140/lib_public/fzn_ic"

TIME_FLAGS=""
TIME_LIMIT=60

#BENCHMARK_DIRS="bibd golomb kakuro knights langford radiation shortest_path steiner-triples"
BENCHMARK_DIRS="bibd"

for solver in $SOLVERS
do
    case $solver in

        eclipse_fd)
            BATCH="modref.eclipse_fd"
            SOLVER_DESC="ECLiPSe/FD"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS="-I ${ECLIPSE_GLOBALS_FD_DIR}"
            FZN="$THIS_DIR/scripts/eclipse_fd.sh"
            FZN_FLAGS=""
        ;;

        eclipse_ic)
            BATCH="modref.eclipse_ic"
            SOLVER_DESC="ECLiPSe/IC"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS="-I ${ECLIPSE_GLOBALS_IC_DIR}"
            FZN="$THIS_DIR/scripts/eclipse_ic.sh"
            FZN_FLAGS=""
        ;; 

        fzntini)
            BATCH="modref.fzntini"
            SOLVER_DESC="FznTini"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS=""
            FZN="fzntini"
            FZN_FLAGS=""
        ;;

        g12_colgen_cplex)
            BATCH="modref.g12_colgen_cplex"
            SOLVER_DESC="G12/ColGen (CPLEX/CPLEX)"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS="--solver colgen --colgen-mip-solver=cplex --no-warn-unknown-annotations"
        ;;

        g12_fd)
            BATCH="modref.g12_fd"
            SOLVER_DESC="G12/FD"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS=""
        ;;

        g12_lazyfd_minisat)
            BATCH="modref.g12_lazyfd_minisat"
            SOLVER_DESC="G12/LazyFD (Minisat)"
            MZN2FZN="mzn2fzn"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS="--solver lazyfd --sat-solver=minisat"
        ;;

        g12_mip_cplex)
            BATCH="modref.g12_mip_cplex" 
            SOLVER_DESC="G12/MIP (CPLEX)"
            MZN2FZN="mzn2fzn_lin"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS="--solver mip --mip-solver=cplex"
        ;;

        g12_mip_osi_cbc)
            BATCH="modref.g12_mip_osi_cbc"
            SOLVER_DESC="G12/MIP (OSI-CBC)"
            MZN2FZN="mzn2fzn_lin"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS="--solver mip --mip-solver=osi-cbc"
        ;;

        g12_mip_osi_cplex)
            BATCH="modref.g12_mip_osi_cplex"
            SOLVER_DESC="G12/MIP (OSI-CPLEX)"
            MZN2FZN="mzn2fzn_lin"
            MZN2FZN_FLAGS=""
            FZN="flatzinc"
            FZN_FLAGS="--solver mip --mip-solver=osi-cplex"
        ;;
   
        g12_zinc)
            BATCH="modref.g12_zinc"
            SOLVER_DESC="G12/Zinc"
            MZN2FZN="$ZINC_FLATTEN"
            MZN2FZN_FLAGS=""
            FZN="$ZINC_EVAL"
            FZN_FLAGS=""
        ;;

        gecode)
            BATCH="modref.gecode"
            SOLVER_DESc="Gecode"
            MZN2FZN="mzn2fzn"
            FZN="fz"
            FZN_FLAGS=""
        ;;

        *)
            echo "unknown solver to benchmark: $solver" 1>&2
            exit 1
        ;;
    esac
    ./runbenchmarks --time-limit $TIME_LIMIT --time-cmd $TIME_CMD \
        --time-flags "$TIME_FLAGS" \
        -b $BATCH -m $MZN2FZN --mzn2fzn-flags "$MZN2FZN_FLAGS" -f "$FZN" \
        --flatzinc-flags "$FZN_FLAGS" $BENCHMARK_DIRS
    
    echo "SOLVER: ${SOLVER_DESC}" >> "${OUTPUT}.results0"
    cat EVALUATION.${BATCH} >>  "${OUTPUT}.results0"

    find . -name "*.fzn" | xargs /bin/rm -f

done

cat "${OUTPUT}.results0" | grep -v "^ILOG" > "$OUTPUT.results"
